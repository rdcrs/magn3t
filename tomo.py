# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_tomo')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_tomo')
    _tomo = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tomo', [dirname(__file__)])
        except ImportError:
            import _tomo
            return _tomo
        try:
            _mod = imp.load_module('_tomo', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _tomo = swig_import_helper()
    del swig_import_helper
else:
    import _tomo
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tomo.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _tomo.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _tomo.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _tomo.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _tomo.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _tomo.SwigPyIterator_equal(self, x)

    def copy(self):
        return _tomo.SwigPyIterator_copy(self)

    def next(self):
        return _tomo.SwigPyIterator_next(self)

    def __next__(self):
        return _tomo.SwigPyIterator___next__(self)

    def previous(self):
        return _tomo.SwigPyIterator_previous(self)

    def advance(self, n):
        return _tomo.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _tomo.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _tomo.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _tomo.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _tomo.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _tomo.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _tomo.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _tomo.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tomo.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tomo.IntVector___nonzero__(self)

    def __bool__(self):
        return _tomo.IntVector___bool__(self)

    def __len__(self):
        return _tomo.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _tomo.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tomo.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tomo.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tomo.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tomo.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tomo.IntVector___setitem__(self, *args)

    def pop(self):
        return _tomo.IntVector_pop(self)

    def append(self, x):
        return _tomo.IntVector_append(self, x)

    def empty(self):
        return _tomo.IntVector_empty(self)

    def size(self):
        return _tomo.IntVector_size(self)

    def swap(self, v):
        return _tomo.IntVector_swap(self, v)

    def begin(self):
        return _tomo.IntVector_begin(self)

    def end(self):
        return _tomo.IntVector_end(self)

    def rbegin(self):
        return _tomo.IntVector_rbegin(self)

    def rend(self):
        return _tomo.IntVector_rend(self)

    def clear(self):
        return _tomo.IntVector_clear(self)

    def get_allocator(self):
        return _tomo.IntVector_get_allocator(self)

    def pop_back(self):
        return _tomo.IntVector_pop_back(self)

    def erase(self, *args):
        return _tomo.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _tomo.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _tomo.IntVector_push_back(self, x)

    def front(self):
        return _tomo.IntVector_front(self)

    def back(self):
        return _tomo.IntVector_back(self)

    def assign(self, n, x):
        return _tomo.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _tomo.IntVector_resize(self, *args)

    def insert(self, *args):
        return _tomo.IntVector_insert(self, *args)

    def reserve(self, n):
        return _tomo.IntVector_reserve(self, n)

    def capacity(self):
        return _tomo.IntVector_capacity(self)
    __swig_destroy__ = _tomo.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _tomo.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tomo.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tomo.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _tomo.DoubleVector___bool__(self)

    def __len__(self):
        return _tomo.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _tomo.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tomo.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tomo.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tomo.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tomo.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tomo.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _tomo.DoubleVector_pop(self)

    def append(self, x):
        return _tomo.DoubleVector_append(self, x)

    def empty(self):
        return _tomo.DoubleVector_empty(self)

    def size(self):
        return _tomo.DoubleVector_size(self)

    def swap(self, v):
        return _tomo.DoubleVector_swap(self, v)

    def begin(self):
        return _tomo.DoubleVector_begin(self)

    def end(self):
        return _tomo.DoubleVector_end(self)

    def rbegin(self):
        return _tomo.DoubleVector_rbegin(self)

    def rend(self):
        return _tomo.DoubleVector_rend(self)

    def clear(self):
        return _tomo.DoubleVector_clear(self)

    def get_allocator(self):
        return _tomo.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _tomo.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _tomo.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _tomo.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _tomo.DoubleVector_push_back(self, x)

    def front(self):
        return _tomo.DoubleVector_front(self)

    def back(self):
        return _tomo.DoubleVector_back(self)

    def assign(self, n, x):
        return _tomo.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _tomo.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _tomo.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _tomo.DoubleVector_reserve(self, n)

    def capacity(self):
        return _tomo.DoubleVector_capacity(self)
    __swig_destroy__ = _tomo.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _tomo.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class ComplexVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tomo.ComplexVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tomo.ComplexVector___nonzero__(self)

    def __bool__(self):
        return _tomo.ComplexVector___bool__(self)

    def __len__(self):
        return _tomo.ComplexVector___len__(self)

    def __getslice__(self, i, j):
        return _tomo.ComplexVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tomo.ComplexVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tomo.ComplexVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tomo.ComplexVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tomo.ComplexVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tomo.ComplexVector___setitem__(self, *args)

    def pop(self):
        return _tomo.ComplexVector_pop(self)

    def append(self, x):
        return _tomo.ComplexVector_append(self, x)

    def empty(self):
        return _tomo.ComplexVector_empty(self)

    def size(self):
        return _tomo.ComplexVector_size(self)

    def swap(self, v):
        return _tomo.ComplexVector_swap(self, v)

    def begin(self):
        return _tomo.ComplexVector_begin(self)

    def end(self):
        return _tomo.ComplexVector_end(self)

    def rbegin(self):
        return _tomo.ComplexVector_rbegin(self)

    def rend(self):
        return _tomo.ComplexVector_rend(self)

    def clear(self):
        return _tomo.ComplexVector_clear(self)

    def get_allocator(self):
        return _tomo.ComplexVector_get_allocator(self)

    def pop_back(self):
        return _tomo.ComplexVector_pop_back(self)

    def erase(self, *args):
        return _tomo.ComplexVector_erase(self, *args)

    def __init__(self, *args):
        this = _tomo.new_ComplexVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _tomo.ComplexVector_push_back(self, x)

    def front(self):
        return _tomo.ComplexVector_front(self)

    def back(self):
        return _tomo.ComplexVector_back(self)

    def assign(self, n, x):
        return _tomo.ComplexVector_assign(self, n, x)

    def resize(self, *args):
        return _tomo.ComplexVector_resize(self, *args)

    def insert(self, *args):
        return _tomo.ComplexVector_insert(self, *args)

    def reserve(self, n):
        return _tomo.ComplexVector_reserve(self, n)

    def capacity(self):
        return _tomo.ComplexVector_capacity(self)
    __swig_destroy__ = _tomo.delete_ComplexVector
    __del__ = lambda self: None
ComplexVector_swigregister = _tomo.ComplexVector_swigregister
ComplexVector_swigregister(ComplexVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tomo.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tomo.StringVector___nonzero__(self)

    def __bool__(self):
        return _tomo.StringVector___bool__(self)

    def __len__(self):
        return _tomo.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _tomo.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tomo.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tomo.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tomo.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tomo.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tomo.StringVector___setitem__(self, *args)

    def pop(self):
        return _tomo.StringVector_pop(self)

    def append(self, x):
        return _tomo.StringVector_append(self, x)

    def empty(self):
        return _tomo.StringVector_empty(self)

    def size(self):
        return _tomo.StringVector_size(self)

    def swap(self, v):
        return _tomo.StringVector_swap(self, v)

    def begin(self):
        return _tomo.StringVector_begin(self)

    def end(self):
        return _tomo.StringVector_end(self)

    def rbegin(self):
        return _tomo.StringVector_rbegin(self)

    def rend(self):
        return _tomo.StringVector_rend(self)

    def clear(self):
        return _tomo.StringVector_clear(self)

    def get_allocator(self):
        return _tomo.StringVector_get_allocator(self)

    def pop_back(self):
        return _tomo.StringVector_pop_back(self)

    def erase(self, *args):
        return _tomo.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _tomo.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _tomo.StringVector_push_back(self, x)

    def front(self):
        return _tomo.StringVector_front(self)

    def back(self):
        return _tomo.StringVector_back(self)

    def assign(self, n, x):
        return _tomo.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _tomo.StringVector_resize(self, *args)

    def insert(self, *args):
        return _tomo.StringVector_insert(self, *args)

    def reserve(self, n):
        return _tomo.StringVector_reserve(self, n)

    def capacity(self):
        return _tomo.StringVector_capacity(self)
    __swig_destroy__ = _tomo.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _tomo.StringVector_swigregister
StringVector_swigregister(StringVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tomo.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tomo.FloatVector___nonzero__(self)

    def __bool__(self):
        return _tomo.FloatVector___bool__(self)

    def __len__(self):
        return _tomo.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _tomo.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tomo.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tomo.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tomo.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tomo.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tomo.FloatVector___setitem__(self, *args)

    def pop(self):
        return _tomo.FloatVector_pop(self)

    def append(self, x):
        return _tomo.FloatVector_append(self, x)

    def empty(self):
        return _tomo.FloatVector_empty(self)

    def size(self):
        return _tomo.FloatVector_size(self)

    def swap(self, v):
        return _tomo.FloatVector_swap(self, v)

    def begin(self):
        return _tomo.FloatVector_begin(self)

    def end(self):
        return _tomo.FloatVector_end(self)

    def rbegin(self):
        return _tomo.FloatVector_rbegin(self)

    def rend(self):
        return _tomo.FloatVector_rend(self)

    def clear(self):
        return _tomo.FloatVector_clear(self)

    def get_allocator(self):
        return _tomo.FloatVector_get_allocator(self)

    def pop_back(self):
        return _tomo.FloatVector_pop_back(self)

    def erase(self, *args):
        return _tomo.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _tomo.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _tomo.FloatVector_push_back(self, x)

    def front(self):
        return _tomo.FloatVector_front(self)

    def back(self):
        return _tomo.FloatVector_back(self)

    def assign(self, n, x):
        return _tomo.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _tomo.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _tomo.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _tomo.FloatVector_reserve(self, n)

    def capacity(self):
        return _tomo.FloatVector_capacity(self)
    __swig_destroy__ = _tomo.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _tomo.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class VectorOfDoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfDoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfDoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tomo.VectorOfDoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tomo.VectorOfDoubleVector___nonzero__(self)

    def __bool__(self):
        return _tomo.VectorOfDoubleVector___bool__(self)

    def __len__(self):
        return _tomo.VectorOfDoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _tomo.VectorOfDoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tomo.VectorOfDoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tomo.VectorOfDoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tomo.VectorOfDoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tomo.VectorOfDoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tomo.VectorOfDoubleVector___setitem__(self, *args)

    def pop(self):
        return _tomo.VectorOfDoubleVector_pop(self)

    def append(self, x):
        return _tomo.VectorOfDoubleVector_append(self, x)

    def empty(self):
        return _tomo.VectorOfDoubleVector_empty(self)

    def size(self):
        return _tomo.VectorOfDoubleVector_size(self)

    def swap(self, v):
        return _tomo.VectorOfDoubleVector_swap(self, v)

    def begin(self):
        return _tomo.VectorOfDoubleVector_begin(self)

    def end(self):
        return _tomo.VectorOfDoubleVector_end(self)

    def rbegin(self):
        return _tomo.VectorOfDoubleVector_rbegin(self)

    def rend(self):
        return _tomo.VectorOfDoubleVector_rend(self)

    def clear(self):
        return _tomo.VectorOfDoubleVector_clear(self)

    def get_allocator(self):
        return _tomo.VectorOfDoubleVector_get_allocator(self)

    def pop_back(self):
        return _tomo.VectorOfDoubleVector_pop_back(self)

    def erase(self, *args):
        return _tomo.VectorOfDoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _tomo.new_VectorOfDoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _tomo.VectorOfDoubleVector_push_back(self, x)

    def front(self):
        return _tomo.VectorOfDoubleVector_front(self)

    def back(self):
        return _tomo.VectorOfDoubleVector_back(self)

    def assign(self, n, x):
        return _tomo.VectorOfDoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _tomo.VectorOfDoubleVector_resize(self, *args)

    def insert(self, *args):
        return _tomo.VectorOfDoubleVector_insert(self, *args)

    def reserve(self, n):
        return _tomo.VectorOfDoubleVector_reserve(self, n)

    def capacity(self):
        return _tomo.VectorOfDoubleVector_capacity(self)
    __swig_destroy__ = _tomo.delete_VectorOfDoubleVector
    __del__ = lambda self: None
VectorOfDoubleVector_swigregister = _tomo.VectorOfDoubleVector_swigregister
VectorOfDoubleVector_swigregister(VectorOfDoubleVector)


def random_double(a, b):
    return _tomo.random_double(a, b)
random_double = _tomo.random_double

def MRCtoVector(fileName):
    return _tomo.MRCtoVector(fileName)
MRCtoVector = _tomo.MRCtoVector
class cubee(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cubee, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cubee, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Nx"] = _tomo.cubee_Nx_set
    __swig_getmethods__["Nx"] = _tomo.cubee_Nx_get
    if _newclass:
        Nx = _swig_property(_tomo.cubee_Nx_get, _tomo.cubee_Nx_set)
    __swig_setmethods__["Ny"] = _tomo.cubee_Ny_set
    __swig_getmethods__["Ny"] = _tomo.cubee_Ny_get
    if _newclass:
        Ny = _swig_property(_tomo.cubee_Ny_get, _tomo.cubee_Ny_set)
    __swig_setmethods__["Nz"] = _tomo.cubee_Nz_set
    __swig_getmethods__["Nz"] = _tomo.cubee_Nz_get
    if _newclass:
        Nz = _swig_property(_tomo.cubee_Nz_get, _tomo.cubee_Nz_set)
    __swig_setmethods__["N_tot"] = _tomo.cubee_N_tot_set
    __swig_getmethods__["N_tot"] = _tomo.cubee_N_tot_get
    if _newclass:
        N_tot = _swig_property(_tomo.cubee_N_tot_get, _tomo.cubee_N_tot_set)
    __swig_setmethods__["xx"] = _tomo.cubee_xx_set
    __swig_getmethods__["xx"] = _tomo.cubee_xx_get
    if _newclass:
        xx = _swig_property(_tomo.cubee_xx_get, _tomo.cubee_xx_set)
    __swig_setmethods__["Volume"] = _tomo.cubee_Volume_set
    __swig_getmethods__["Volume"] = _tomo.cubee_Volume_get
    if _newclass:
        Volume = _swig_property(_tomo.cubee_Volume_get, _tomo.cubee_Volume_set)
    __swig_setmethods__["Surface"] = _tomo.cubee_Surface_set
    __swig_getmethods__["Surface"] = _tomo.cubee_Surface_get
    if _newclass:
        Surface = _swig_property(_tomo.cubee_Surface_get, _tomo.cubee_Surface_set)
    __swig_setmethods__["Val"] = _tomo.cubee_Val_set
    __swig_getmethods__["Val"] = _tomo.cubee_Val_get
    if _newclass:
        Val = _swig_property(_tomo.cubee_Val_get, _tomo.cubee_Val_set)

    def modulo(self, *args):
        return _tomo.cubee_modulo(self, *args)

    def index(self, i, j, k):
        return _tomo.cubee_index(self, i, j, k)

    def vecini(self, centru, vecX, vecY, vecZ):
        return _tomo.cubee_vecini(self, centru, vecX, vecY, vecZ)

    def index3D(self, ind):
        return _tomo.cubee_index3D(self, ind)

    def test(self):
        return _tomo.cubee_test(self)

    def index2(self, i, j, k):
        return _tomo.cubee_index2(self, i, j, k)

    def __init__(self, *args):
        this = _tomo.new_cubee(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def close(self):
        return _tomo.cubee_close(self)

    def getVal(self):
        return _tomo.cubee_getVal(self)

    def getSafe(self, i1, i2, i3):
        return _tomo.cubee_getSafe(self, i1, i2, i3)

    def get(self, *args):
        return _tomo.cubee_get(self, *args)

    def set(self, *args):
        return _tomo.cubee_set(self, *args)

    def setSafe(self, i1, i2, i3, val):
        return _tomo.cubee_setSafe(self, i1, i2, i3, val)

    def normalize(self):
        return _tomo.cubee_normalize(self)

    def __call__(self, i1, i2, i3):
        return _tomo.cubee___call__(self, i1, i2, i3)

    def __sub__(self, *args):
        return _tomo.cubee___sub__(self, *args)

    def __add__(self, *args):
        return _tomo.cubee___add__(self, *args)

    def __mul__(self, x):
        return _tomo.cubee___mul__(self, x)

    def __truediv__(self, *args):
        return _tomo.cubee___truediv__(self, *args)
    __div__ = __truediv__



    def copy(self):
        return _tomo.cubee_copy(self)

    def erode(self, culoare, n):
        return _tomo.cubee_erode(self, culoare, n)

    def addSphere(self, x, y, z, raza, smo=0):
        return _tomo.cubee_addSphere(self, x, y, z, raza, smo)

    def interpolation(self, x, y, z):
        return _tomo.cubee_interpolation(self, x, y, z)

    def fillInterpolation(self, *args):
        return _tomo.cubee_fillInterpolation(self, *args)
    __swig_destroy__ = _tomo.delete_cubee
    __del__ = lambda self: None
cubee_swigregister = _tomo.cubee_swigregister
cubee_swigregister(cubee)


def readMRC(arg1):
    return _tomo.readMRC(arg1)
readMRC = _tomo.readMRC

def writeMRC(arg1, arg2):
    return _tomo.writeMRC(arg1, arg2)
writeMRC = _tomo.writeMRC

def applyThreshold(c, th):
    return _tomo.applyThreshold(c, th)
applyThreshold = _tomo.applyThreshold

def fd(x, r, t):
    return _tomo.fd(x, r, t)
fd = _tomo.fd

def volume(*args):
    return _tomo.volume(*args)
volume = _tomo.volume

def surface(c, culoare):
    return _tomo.surface(c, culoare)
surface = _tomo.surface

def surfaceModificat(c, culoare):
    return _tomo.surfaceModificat(c, culoare)
surfaceModificat = _tomo.surfaceModificat

def applyThreshold_linear(*args):
    return _tomo.applyThreshold_linear(*args)
applyThreshold_linear = _tomo.applyThreshold_linear

def findValue(c, value):
    return _tomo.findValue(c, value)
findValue = _tomo.findValue

def fill(c, i1, i2, i3, target, newcolor):
    return _tomo.fill(c, i1, i2, i3, target, newcolor)
fill = _tomo.fill

def fill_particule(c, startColor):
    return _tomo.fill_particule(c, startColor)
fill_particule = _tomo.fill_particule

def fill_particule_volume(c, startColor):
    return _tomo.fill_particule_volume(c, startColor)
fill_particule_volume = _tomo.fill_particule_volume

def volumeList(c):
    return _tomo.volumeList(c)
volumeList = _tomo.volumeList

def fill_particule_volume_2(c, startColor):
    return _tomo.fill_particule_volume_2(c, startColor)
fill_particule_volume_2 = _tomo.fill_particule_volume_2

def fillParticlesRandom(c, startColor):
    return _tomo.fillParticlesRandom(c, startColor)
fillParticlesRandom = _tomo.fillParticlesRandom

def fillParticlesRandom_2(c, startColor, startColor2):
    return _tomo.fillParticlesRandom_2(c, startColor, startColor2)
fillParticlesRandom_2 = _tomo.fillParticlesRandom_2

def erode(c, culoare, n):
    return _tomo.erode(c, culoare, n)
erode = _tomo.erode

def dilate(c, culoare, n):
    return _tomo.dilate(c, culoare, n)
dilate = _tomo.dilate

def dilate2(c, culoare, n):
    return _tomo.dilate2(c, culoare, n)
dilate2 = _tomo.dilate2

def erode2(c, culoare, n):
    return _tomo.erode2(c, culoare, n)
erode2 = _tomo.erode2

def print2(a1, Nx, Ny, Nz):
    return _tomo.print2(a1, Nx, Ny, Nz)
print2 = _tomo.print2

def unVector(n):
    return _tomo.unVector(n)
unVector = _tomo.unVector

def erodeGrayscale(c, n):
    return _tomo.erodeGrayscale(c, n)
erodeGrayscale = _tomo.erodeGrayscale

def erodeGrayscaleCheb(c, n):
    return _tomo.erodeGrayscaleCheb(c, n)
erodeGrayscaleCheb = _tomo.erodeGrayscaleCheb

def dilateGrayscale(c, n):
    return _tomo.dilateGrayscale(c, n)
dilateGrayscale = _tomo.dilateGrayscale

def dilateGrayscaleCheb(c, n):
    return _tomo.dilateGrayscaleCheb(c, n)
dilateGrayscaleCheb = _tomo.dilateGrayscaleCheb

def dilateGrayscaleGeneral(c, n):
    return _tomo.dilateGrayscaleGeneral(c, n)
dilateGrayscaleGeneral = _tomo.dilateGrayscaleGeneral

def blurGrayscale(c, n):
    return _tomo.blurGrayscale(c, n)
blurGrayscale = _tomo.blurGrayscale

def medianFilter(c):
    return _tomo.medianFilter(c)
medianFilter = _tomo.medianFilter

def isOk(i, n):
    return _tomo.isOk(i, n)
isOk = _tomo.isOk

def distanceMapChessEfficient(c, culoare):
    return _tomo.distanceMapChessEfficient(c, culoare)
distanceMapChessEfficient = _tomo.distanceMapChessEfficient

def distanceMapChebEfficient(c, culoare):
    return _tomo.distanceMapChebEfficient(c, culoare)
distanceMapChebEfficient = _tomo.distanceMapChebEfficient

def distanceMap(c, culoare):
    return _tomo.distanceMap(c, culoare)
distanceMap = _tomo.distanceMap

def distanceMapGeneralEfficient(c, culoare):
    return _tomo.distanceMapGeneralEfficient(c, culoare)
distanceMapGeneralEfficient = _tomo.distanceMapGeneralEfficient

def distanceMapGeneralEfficientMare(cu, culoare):
    return _tomo.distanceMapGeneralEfficientMare(cu, culoare)
distanceMapGeneralEfficientMare = _tomo.distanceMapGeneralEfficientMare

def distanceMapGeneralEfficientMic(cu, culoare):
    return _tomo.distanceMapGeneralEfficientMic(cu, culoare)
distanceMapGeneralEfficientMic = _tomo.distanceMapGeneralEfficientMic

def distanceMapCheb(c, culoare):
    return _tomo.distanceMapCheb(c, culoare)
distanceMapCheb = _tomo.distanceMapCheb

def morphologicalReconstruction(marker, mask):
    return _tomo.morphologicalReconstruction(marker, mask)
morphologicalReconstruction = _tomo.morphologicalReconstruction

def morphologicalReconstructionHybrid(marker, mask):
    return _tomo.morphologicalReconstructionHybrid(marker, mask)
morphologicalReconstructionHybrid = _tomo.morphologicalReconstructionHybrid
class thing(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, thing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, thing, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pixel"] = _tomo.thing_pixel_set
    __swig_getmethods__["pixel"] = _tomo.thing_pixel_get
    if _newclass:
        pixel = _swig_property(_tomo.thing_pixel_get, _tomo.thing_pixel_set)
    __swig_setmethods__["valoare"] = _tomo.thing_valoare_set
    __swig_getmethods__["valoare"] = _tomo.thing_valoare_get
    if _newclass:
        valoare = _swig_property(_tomo.thing_valoare_get, _tomo.thing_valoare_set)

    def __lt__(self, rhs):
        return _tomo.thing___lt__(self, rhs)

    def __gt__(self, rhs):
        return _tomo.thing___gt__(self, rhs)

    def __le__(self, rhs):
        return _tomo.thing___le__(self, rhs)

    def __ge__(self, rhs):
        return _tomo.thing___ge__(self, rhs)

    def __init__(self):
        this = _tomo.new_thing()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tomo.delete_thing
    __del__ = lambda self: None
thing_swigregister = _tomo.thing_swigregister
thing_swigregister(thing)


def priorityFloodModificat(d, seed):
    return _tomo.priorityFloodModificat(d, seed)
priorityFloodModificat = _tomo.priorityFloodModificat

def priorityFlood(*args):
    return _tomo.priorityFlood(*args)
priorityFlood = _tomo.priorityFlood

def otsu(*args):
    return _tomo.otsu(*args)
otsu = _tomo.otsu

def realDeal():
    return _tomo.realDeal()
realDeal = _tomo.realDeal

def addSphere(c, x, y, z, raza, smo=0):
    return _tomo.addSphere(c, x, y, z, raza, smo)
addSphere = _tomo.addSphere

def euler_angles(rot):
    return _tomo.euler_angles(rot)
euler_angles = _tomo.euler_angles

def breit_angles(rot):
    return _tomo.breit_angles(rot)
breit_angles = _tomo.breit_angles

def euler_matrix(alfa, beta, gamma):
    return _tomo.euler_matrix(alfa, beta, gamma)
euler_matrix = _tomo.euler_matrix

def breit_matrix(alfa, beta, gamma):
    return _tomo.breit_matrix(alfa, beta, gamma)
breit_matrix = _tomo.breit_matrix

def addEllipse(cc, x1, x2, x3, a1, a2, a3, alfa, beta, gamma, scala):
    return _tomo.addEllipse(cc, x1, x2, x3, a1, a2, a3, alfa, beta, gamma, scala)
addEllipse = _tomo.addEllipse

def addEllipse2(cc, x1, x2, x3, a1, a2, a3, m, scala, color=1):
    return _tomo.addEllipse2(cc, x1, x2, x3, a1, a2, a3, m, scala, color)
addEllipse2 = _tomo.addEllipse2

def addEllipse3(cc, x1, x2, x3, a1, a2, a3, alfa, beta, gamma, scala):
    return _tomo.addEllipse3(cc, x1, x2, x3, a1, a2, a3, alfa, beta, gamma, scala)
addEllipse3 = _tomo.addEllipse3

def to_vec1(str):
    return _tomo.to_vec1(str)
to_vec1 = _tomo.to_vec1

def read_fis(nume_fila):
    return _tomo.read_fis(nume_fila)
read_fis = _tomo.read_fis

def addPolygon(*args):
    return _tomo.addPolygon(*args)
addPolygon = _tomo.addPolygon

def addSphereAdvanced(c, x, y, z, raza):
    return _tomo.addSphereAdvanced(c, x, y, z, raza)
addSphereAdvanced = _tomo.addSphereAdvanced

def fillSphere(c, nS, mu, sigma):
    return _tomo.fillSphere(c, nS, mu, sigma)
fillSphere = _tomo.fillSphere

def volumeAnalysis(c):
    return _tomo.volumeAnalysis(c)
volumeAnalysis = _tomo.volumeAnalysis

def volumeAnalysisOrientation(c, numeOutput):
    return _tomo.volumeAnalysisOrientation(c, numeOutput)
volumeAnalysisOrientation = _tomo.volumeAnalysisOrientation

def getParticle(c, culoare):
    return _tomo.getParticle(c, culoare)
getParticle = _tomo.getParticle

def volumeAnalysisOrientationColor(c, color):
    return _tomo.volumeAnalysisOrientationColor(c, color)
volumeAnalysisOrientationColor = _tomo.volumeAnalysisOrientationColor

def momentOfInertia(cc, culoare):
    return _tomo.momentOfInertia(cc, culoare)
momentOfInertia = _tomo.momentOfInertia

def fu1():
    return _tomo.fu1()
fu1 = _tomo.fu1

def uniformDistribution(a, b, n):
    return _tomo.uniformDistribution(a, b, n)
uniformDistribution = _tomo.uniformDistribution

def returnVec(x):
    return _tomo.returnVec(x)
returnVec = _tomo.returnVec

def shapeAnalysisOrientationColor(c, color):
    return _tomo.shapeAnalysisOrientationColor(c, color)
shapeAnalysisOrientationColor = _tomo.shapeAnalysisOrientationColor

def _print():
    return _tomo._print()
_print = _tomo._print

def realDeal2():
    return _tomo.realDeal2()
realDeal2 = _tomo.realDeal2

def testFitEll():
    return _tomo.testFitEll()
testFitEll = _tomo.testFitEll

def reparatiiCod():
    return _tomo.reparatiiCod()
reparatiiCod = _tomo.reparatiiCod

def testTest():
    return _tomo.testTest()
testTest = _tomo.testTest

def testInterpolation():
    return _tomo.testInterpolation()
testInterpolation = _tomo.testInterpolation

def main():
    return _tomo.main()
main = _tomo.main
# This file is compatible with both classic and new-style classes.

cvar = _tomo.cvar

